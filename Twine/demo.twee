:: StoryTitle
Wishing Wells


:: StoryData
{
	"ifid": "5CAF53F2-B97C-45CA-9E53-CBD50086BDA5",
	"format": "SugarCube",
	"format-version": "2.30.0",
	"start": "Codepen",
	"tag-colors": {
		"Breaks": "blue",
		"Change-Title": "yellow",
		"Coding-Problem": "red",
		"Done": "green",
		"New-Passage": "purple",
		"Text-to-be-updated-by-Ashley": "orange"
	},
	"zoom": 1
}


:: Story Stylesheet [stylesheet]
@import url("Twine/demo_style.css");


:: Story JavaScript [script]
Config.passages.nobr = true;
Window.SugarCubeState = State;
var urlPrefix="static/"

importScripts([
	'/socket.io/socket.io.js',
	'https://unpkg.com/redux@latest/dist/redux.min.js',
	'https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js',
	`${urlPrefix}Client.js`,
	"https://cdnjs.cloudflare.com/ajax/libs/jquery-csv/1.0.11/jquery.csv.min.js",
	"https://unpkg.com/jquery.nice-number@2.1.0/dist/jquery.nice-number.min.js",
	"https://code.jquery.com/ui/1.12.1/jquery-ui.js"	
]);

(function () {
	"use strict";

	$(document).on(":liveupdate", function () {
		console.log("In liveupdate");
		$(".macro-live").trigger(":liveupdateinternal");
	});

	Macro.add(['liveblock', 'lb'], {
		tags: null,
		handler: function handler() {
			console.log("In liveblock");
			try {
				var content = this.payload[0].contents.trim();
				if (content) {
					var $el = $("<span></span>").addClass("macro-live macro-live-block").wiki(content).appendTo(this.output);
					$el.on(":liveupdateinternal", this.createShadowWrapper(function (ev) {
						$el.empty().wiki(content);
					}));
				}
			} catch (ex) {
				return this.error("bad evaluation: " + (_typeof(ex) === 'object' ? ex.message : ex));
			}
		}
	});
})();


// Run when passage starts 
$(document).one(":passagestart", () => {
    let usersCheck = State.variables.users || {};
	State.variables.users = usersCheck;
	let users = State.variables.users;

    // If client does not exist in Users, add them
    if (!(userData.id in users)) {
        users[userData.id] = {};
    }  

	// Sets userId in State and LocalStorage
    localStorage.setItem('userId', userData.id);
    State.variables.userId = userData.id;

	// Story Init Code
	State.variables.tiger_coins = 0;
	State.variables.ox_coins = 0;
	State.variables.rabbit_coins = 0;
});

$(document).one(":passageend", () => {
	$('#submit').on("mouseup", (e) => {
		$('#codepen_wiki').empty().wiki($('#codepen').val());
	}).trigger("mouseup");
	console.log($('#codepen'));
});


:: Chat {"position":"350,101","size":"100,100"}
<<set $chatlog=$chatlog || "">>
	<<set $chattext=$chattext  || "">>
	<<liveblock>>
	$chatlog <br>
	<</liveblock>>
	<<textbox "$chattext" "" autofocus>> 

	<<button "Continue">>
		<<set $chatlog += "<br>" + $users[$userId].username + ": " + $chattext>>
	<</button>>
	$chattext


:: Codepen {"position":"350,101","size":"100,100"}
<div class='maincontainer'>
	<div class='leftchild'>
		Welcome to Þeyr! (Pronounced "Theyr") <br> <br>
		Þeyr is an extension to Twine SugarCube that allows you to create real-time multiplayer stories. 
		This works by sharing all SugarCube variables between the connected players. If one variable changes, all players' instances will be updated and kept in sync. <br><br>

		When variables change, the game is updated instantly through the use of liveblock. <code>&lt;&lt;liveblock&gt;&gt;</code> tags allow updates to appear on screen without refreshing the passage.
		Make sure to place <code>&lt;&lt;liveblock&gt;&gt;</code> tags around sections with variables that will be updated by other players. (See the example on the right) <br><br>

		The only variable that isn't shared to all other players is <code>userId</code> which is a unique Id that identifies your player. <br><br>

		Here's your <code>userId</code>: $userId <br><br>

		The <code>users</code> object stores information about individual users. <code>userId</code> is used as a key to access a particular user in the <code>users</code> mapping. 
		This entry contains all variables unique to that player. This allows Þeyr to keep track of variables pertaining to specific players, such as how many coins they've collected or what items they have. <br><br>

		Change the textbox below to edit Theyr code:
		<textarea id='codepen'>Your userId is: &dollar;userId
			&#10;&#10;&lt;&lt;liveblock&gt;&gt;
			&#10;Liveblock: 
			&#10;You have &dollar;tiger_coins coins
			&#10;&lt;&lt;/liveblock&gt;&gt;

			&#10;&#10;No Liveblock: 
			&#10;You have &dollar;tiger_coins coins

			&#10;&#10;&lt;&lt;button "Add to Coins"&gt;&gt;
			&#10;&lt;&lt;set &dollar;tiger_coins++&gt;&gt;
			&#10;&lt;&lt;/button&gt;&gt;
		</textarea> 
		/* <div id="codepen" contenteditable="true">
			&dollar;userId
		</div> */
		<button id="submit">Save</button>
		
	</div>
	
	<div class='rightchild'>
		<div class='resultsbox' id='codepen_wiki' />
	</div>
</div>


:: Wishing Wells {"position":"350,100","size":"100,100"}
<<liveblock>>
You approach a shrine that has three wishing wells: The Tiger Well, Ox Well, and Rabbit Well. 
<br><br>
<table>
	<tr>
		<td> Tiger Well: </td>
		<td />
		<td> <b> $tiger_coins Coins </b> </td>
	</tr>
	<tr>
		<td> Ox Well: </td>
		<td />
		<td>  <b> $ox_coins Coins </b> </td>
	</tr>
	<tr>
		<td> Rabbit Well: </td>
		<td />
		<td> <b> $rabbit_coins  Coins </b> </td>
	</tr>

</table>
<br>
<<button "Add to Tiger Well">>
	<<set $tiger_coins++>>
<</button>>
<<button "Add to Ox Well">>
	<<set $ox_coins++>>
<</button>>
<<button "Add to Rabbit Well">>
	<<set $rabbit_coins++>>
<</button>>

<</liveblock>>


